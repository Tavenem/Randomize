using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Globalization;
using Tavenem.Mathematics;
using Tavenem.Randomize.Distributions;

namespace Tavenem.Randomize.Test;

[TestClass]
public class RandomizerTests
{
    /// <summary>
    /// Ensure that the first few results generated by any given use of the randomizer
    /// initialized with a randomly-generated seed are sufficiently distinct. This is judged by
    /// determining the absolute difference between 4 samples from successive runs of the
    /// generator, taking the average of those differences, then taking the average of those
    /// averages over 10k runs. If the average difference between results is greater than or
    /// equal to a quarter of the possible range of values, they are considered sufficiently
    /// distributed.
    /// </summary>
    [TestMethod]
    public void VarietyTest()
    {
        var p = new uint[4];
        var r = new uint[4];
        var avgDifference = 0.0;
        for (var i = 0; i < 10000; i++)
        {
            Array.Copy(r, 0, p, 0, r.Length);
            r[0] = Randomizer.Instance.NextUIntInclusive();
            r[1] = Randomizer.Instance.NextUIntInclusive();
            r[2] = Randomizer.Instance.NextUIntInclusive();
            r[3] = Randomizer.Instance.NextUIntInclusive();
            if (i > 0)
            {
                var difference = (Math.Abs(Math.Abs(p[0]) - Math.Abs(r[0]))
                    + Math.Abs(Math.Abs(p[1]) - Math.Abs(r[1]))
                    + Math.Abs(Math.Abs(p[2]) - Math.Abs(r[2]))
                    + Math.Abs(Math.Abs(p[3]) - Math.Abs(r[3])))
                    / 4;
                avgDifference = i == 1
                    ? difference
                    : (avgDifference * i / (i + 1)) + (difference / (i + 1));
            }

            Randomizer.Instance.Reset(SeedGenerator.GetNewSeed());
        }
        Assert.IsTrue(avgDifference >= uint.MaxValue / 4);
    }

    [TestMethod]
    public void VectorTest()
    {
        var v = Randomizer.Instance.NextVector3<double>(1);
        Assert.IsTrue(Vector3<double>.LengthSquared(v) <= 1);
    }

    [TestMethod]
    public void RandomParametersFormatTest()
    {
        var value = RandomParameters.NewNormal(-0.25, null, new[] { 0, 1.0 / 3.0 }, 2);

        var str = value.ToString();
        Assert.AreEqual($"{DistributionType.Normal} distribution (-0.25;{CultureInfo.CurrentCulture.NumberFormat.PositiveInfinitySymbol}) [0.00;0.33] r:2", str);

        str = value.ToString("r");
        Assert.AreEqual($"{(int)DistributionType.Normal}:-0.25;{NumberFormatInfo.InvariantInfo.PositiveInfinitySymbol}:0;0.33333333333333331:2", str);
        Assert.AreEqual(value, RandomParameters.ParseExact(str, "r"));

        var json = System.Text.Json.JsonSerializer.Serialize(value);
        Assert.AreEqual($"\"{str}\"", json);
        Assert.AreEqual(value, System.Text.Json.JsonSerializer.Deserialize<RandomParameters>(json));
    }
}
